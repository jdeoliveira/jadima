/**
 * $theClass.getClassName() Jgm Stub
 *
 * IMPORTANT: THIS FILE IS AUTOGENERATED BY THE JGM STUB GENERATOR.
 * DO NOT EDIT!!!
 *
 * @todo: considerar excepciones lanzadas por los metodos reales. El objeto Method lanza en
 * ese caso un InvocationTargetException. Habria que desenvolver la excepcion real, "castearla"
 * a la clase correspondiente y volver a lanzarla.
 *
 */

#if($theClass.getPackageName().equals(""))
    //Default package
#else
    package $theClass.getPackageName();
#end

public #isAbstract($theClass) class $className #extends($theClass) #interfaces($theClass)
{

#fields($theClass)

#foreach ($method in $theClass.getMethods())

    // ITERANDO METODO No.$velocityCount

    #if($method.isPublic() || $method.isProtected() || $method.getName().equals("<init>"))

    	//Es un metodo publico o protected o constructor

        #methodSignature($method)
        
        #if($method.isAbstract()) 
            ; //El metodo es abstracto 
        #else 
            //el metodo no es abstracto
            {

            #if($util.isConstructor($method)) 
                #superCall($theClass) 
            #end
                //JGM: Do nothing, this method will never be executed
                #if(!($method.getReturnType().toString().equals("void")))
                    #if($primitivesNull.containsKey($method.getReturnType().toString()))
                        return $primitivesNull.get($method.getReturnType().toString()) ;
                    #else
                        return ($util.replaceInnerClass("$method.getReturnType()")) null ;
                    #end
                #end
            }
        #end
    #else 
        //NO ES PUBLICO
    #end
#end
}
//JGM: Template end