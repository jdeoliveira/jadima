/**
 * $theClass.getClassName() Jgm Stub (Wrapper approach)
 *
 * IMPORTANT: THIS FILE IS AUTOGENERATED BY THE JGM STUB GENERATOR.
 * DO NOT EDIT!!!
 *
 * @todo: considerar excepciones lanzadas por los metodos reales. El objeto Method lanza en
 * ese caso un InvocationTargetException. Habria que desenvolver la excepcion real, "castearla"
 * a la clase correspondiente y volver a lanzarla.
 *
 */

package $theClass.getPackageName();


public interface $className #extendsInterface($theClass)
{
        
#fields($theClass)

#foreach ($method in $theClass.getMethods())

	// ITERANDO METODO No.$velocityCount

    //Method.arguments.count= $util.getArraySize($method.getArgumentTypes())
    //retorno: $method.getReturnType().toString()
    //primitivas: $primitives.toString()
    //wrapper: 
    //contains: $primitives.contains($method.getReturnType().toString())

    #if($method.isPublic() && (!($util.isConstructor($method))))

    	//Es un metodo publico
        #methodSignature($method)
         ;
  
    #else 
        //NO ES PUBLICO o es constructor
    #end
#end
//Fin de la clase

    //JGM: Here starts the public and named inner classes declaration
    #foreach ($innerClass in $theInnerClasses)

        #if($innerClass.isInterface())
            //ES interface
            #set($isInnerInterface = true)
        #else 
            //NOOOO ES interface  
            #set($isInnerInterface = false)
        #end

        #isPublic($innerClass) #isProtected($innerClass) #if($util.isStaticInnerClass($innerClass)) static #end #isAbstract($innerClass) #if($isInnerInterface) interface #else class #end $util.extractClassName($innerClass) #extends($innerClass) #interfaces($innerClass)
        {

        //antes de field

        #fields($innerClass)

        //antes de iterar los metodos

        #foreach ($innerMethod in $innerClass.getMethods())

            // ITERANDO METODO No.$velocityCount
            // Nombre: $innerMethod.getName()
            // Is inner interface: #if($isInnerInterface) YEAH #else no #end

            #if($innerMethod.isPublic() || $innerMethod.isProtected() || ($innerMethod.getName().equals("<init>") && !($isInnerInterface)))

                //Es un metodo publico o protected o constructor
                #innerMethodSignature($innerMethod)

                #if($innerMethod.isAbstract()) 
                    ; //El metodo es abstracto 
                #else 
                    //el metodo no es abstracto
                    {

                    #if($util.isConstructor($innerMethod)) 
                        #superCall($innerClass) 
                    #end
                        //JGM: Do nothing, this method will never be executed
                        #if(!($innerMethod.getReturnType().toString().equals("void")))
                            #if($primitivesNull.containsKey($innerMethod.getReturnType().toString()))
                                return $primitivesNull.get($innerMethod.getReturnType().toString()) ;
                            #else
                                return ($util.replaceInnerClass("$innerMethod.getReturnType()")) null ;
                            #end
                        #end
                    }
                #end
            #else 
                //NO ES PUBLICO
            #end
        #end
        }
    #end

    //JGM: Inner classes declaration ended

}
//FIN DEL TEMPLATE